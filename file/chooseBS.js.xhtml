'use strict';
var banksList;
var fetchedBanks;
var banks;
var effectiveIssuerId;

function redirectUrl(url) {
    window.location.href = url;
}

function loadingContinuation(list, wrapper, getBanks) {
    setVoivodeshipList();
    setBankList();

    function getIssuerIdByName(name) {
        let value = null;
        fetchedBanks.forEach(bank => {
            if (bank.name.localeCompare(name) == 0) {
                value = bank.issuer;
            }
        })
        return value;
    }

    var createList = function (values) {
        if (list) {
            list.remove();
        }
        var ul = document.createElement('ul');
        ul.classList.add('dropdown-menu');
        values.forEach(function (value) {
            var li = document.createElement('li');
            li.classList.add('dropdown-item')
            li.setAttribute('tabIndex', 0)
            li.textContent = value;
            li.addEventListener("click", function (event) {
                var bankSearch = document.getElementById('bankSearch');
                bankSearch.value = event.target.textContent
                effectiveIssuerId.value = getIssuerIdByName(bankSearch.value);
                list.remove();
                list = null;
            })
            li.addEventListener('keypress', function (e) {
                if (e.keyCode === 13) {
                    var bankSearch = document.getElementById('bankSearch');
                    bankSearch.value = event.target.textContent
                    list.remove();
                    list = null;
                }
            });

            ul.appendChild(li);

        });
        return ul;
    };

    var manageList = function (string, filteredArray) {
        var showedValues = filteredArray
            .filter((str) => {
                return str.toLowerCase().indexOf(string.toLowerCase()) >= 0;
            });
        if (showedValues.length) {
            list = createList(showedValues);
            wrapper.append(list);
        } else if (list != null) {
            list.remove();
            list = null;
        }
    };
    // Function which toggle search hints
    $('#bankSearch').keyup(function (event) {

        effectiveIssuerId.value = getIssuerIdByName(document.getElementById('bankSearch').value);
        var banks = [];
        banks = fetchedBanks.map(bank => {
            return bank.name;
        })
        if (event.target.value.length > 2) {
            manageList(event.target.value, banks);
        } else {
            if (list) {
                list.remove();
            }

        }
    });

    function setVoivodeshipList() {
        var x, i, j, selElmnt, a, b, c;
        /* Look for any elements with the class "custom-select": */
        x = document.getElementsByClassName("voivodeshipSelect")[0];

        selElmnt = x.getElementsByTagName("select")[0];
        /* For each element, create a new DIV that will act as the selected item: */
        a = document.createElement("DIV");
        a.setAttribute("class", "select-selected margin-top-10px bank-select-list");
        a.setAttribute('tabindex', '0');
        a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
        x.appendChild(a);
        /* For each element, create a new DIV that will contain the option list: */
        b = document.createElement("DIV");
        b.setAttribute("class", "select-items select-hide");
        for (j = 1; j < selElmnt.length; j++) {
            /* For each option in the original select element,
            create a new DIV that will act as an option item: */
            c = document.createElement("DIV");
            c.classList.add('select-item');
            c.setAttribute('tabindex', '0');
            c.innerHTML = selElmnt.options[j].innerHTML;
            c.addEventListener("click", function (e) {
                /* When an item is clicked, update the original select box,
                and the selected item: */
                var currentItem = document.getElementsByClassName("voivodeshipSelect")[0].getElementsByClassName("same-as-selected")[0];
                var y, i, k, s, h;
                s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                h = this.parentNode.previousSibling;
                for (i = 0; i < s.length; i++) {
                    if (s.options[i].innerHTML == this.innerHTML) {
                        s.selectedIndex = i;
                        h.innerHTML = this.innerHTML;
                        y = this.parentNode.getElementsByClassName("same-as-selected");
                        for (k = 0; k < y.length; k++) {
                            y[k].removeAttribute("class");
                        }
                        this.setAttribute("class", "same-as-selected");
                        break;
                    }
                }
                h.click();
                if (currentItem && currentItem.innerText === e.target.innerText) {
                    return;
                }

                getBanks();
                setBankList(true);
            });
            c.addEventListener('keypress', function (e) {
                if (e.keyCode === 13) {
                    var y, i, k, s, h;
                    var currentItem = document.getElementsByClassName("voivodeshipSelect")[0].getElementsByClassName("same-as-selected")[0];
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < s.length; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            for (k = 0; k < y.length; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                    if (currentItem && currentItem.innerText === e.target.innerText) {
                        return;
                    }
                    getBanks();
                    setBankList(true);
                    closeAllSelect(this);

                }
            })
            b.appendChild(c);
        }
        x.appendChild(b);
        a.addEventListener("click", function (e) {

            /* When the select box is clicked, close any other select boxes,
            and open/close the current select box: */
            if (e.target.nextSibling.childElementCount > 0) {
                e.target.classList.add('rotate');
            }
            e.stopPropagation();
            closeAllSelect(this);
            this.nextSibling.classList.toggle("select-hide");
        });

        a.addEventListener("keypress", function (e) {
            if (e.key === 'Enter') {
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                e.target.classList.add('rotate');
            }
        });
        // }
    }

    function setBankList() {
        effectiveIssuerId.value = null;
        var x, i, j, selElmnt, a, b, c;
        /* Look for any elements with the class "custom-select": */
        x = document.getElementsByClassName("bankSelect")[0];

            if (x.getElementsByClassName('select-selected').length) {
                x.getElementsByClassName('select-selected')[0].remove();
                x.getElementsByClassName('select-items')[0].remove();
            }
            selElmnt = x.getElementsByTagName("select")[0];

            /* For each element, create a new DIV that will act as the selected item: */
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected margin-top-10px bank-select-list");
            a.setAttribute('tabindex', '0');
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x.appendChild(a);
            /* For each element, create a new DIV that will contain the option list: */
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < selElmnt.length; j++) {
                /* For each option in the original select element,
                create a new DIV that will act as an option item: */
                c = document.createElement("DIV");
                c.classList.add('select-item');
                c.setAttribute('tabindex', "0")
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /* When an item is clicked, update the original select box,
                    and the selected item: */
                    var y, i, k, s, h;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < s.length; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            effectiveIssuerId.value = getIssuerIdByName(this.innerHTML);
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            for (k = 0; k < y.length; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();

                });
                c.addEventListener('keypress', function (e) {
                    if (e.keyCode === 13) {
                        var y, i, k, s, h;
                        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                        h = this.parentNode.previousSibling;
                        for (i = 0; i < s.length; i++) {
                            if (s.options[i].innerHTML == this.innerHTML) {
                                s.selectedIndex = i;
                                h.innerHTML = this.innerHTML;
                                y = this.parentNode.getElementsByClassName("same-as-selected");
                                for (k = 0; k < y.length; k++) {
                                    y[k].removeAttribute("class");
                                }
                                this.setAttribute("class", "same-as-selected");
                                break;
                            }
                        }
                        h.click();
                        closeAllSelect(this);

                }
            })
            b.appendChild(c);
        }
        x.appendChild(b);
        a.addEventListener("click", function (e) {

            /* When the select box is clicked, close any other select boxes,
            and open/close the current select box: */
            if (e.target.nextSibling.childElementCount > 0) {
                e.target.classList.add('rotate');
            }
            e.stopPropagation();
            closeAllSelect(this);
            this.nextSibling.classList.toggle("select-hide");
        });

        a.addEventListener("keypress", function (e) {
            if (e.key === 'Enter') {
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                e.target.classList.add('rotate');
            }
        });
        // }
    }

    function closeAllSelect(elmnt) {
        /* A function that will close all select boxes in the document,
        except the current select box: */
        var x, y, i, arrNo = [];
        x = document.getElementsByClassName("select-items");
        y = document.getElementsByClassName("select-selected");
        for (i = 0; i < y.length; i++) {
            if (elmnt == y[i]) {
                arrNo.push(i)
            } else {
                y[i].classList.remove("rotate");
            }
        }
        for (i = 0; i < x.length; i++) {
            if (arrNo.indexOf(i)) {
                x[i].classList.add("select-hide");
            }
        }
    }

    /* If the user clicks anywhere outside the select box,
    then close all select boxes: */
    document.addEventListener("click", closeAllSelect);
    document.addEventListener("keyup", function (e) {
        if (e.key === "Escape") {
            closeAllSelect();
            if (list) {
                list.remove();
            }
        }
    });
    return list;
}

$(document).ready(function () {
    GlobalVariables.determineLanguage();

    if(document.getElementById("banki") == null ) {
        return;
    }
    var list;
    var wrapper = $('.wrapper');
    $(document).click(function (event) {
        if (list) {
            if (event.target.id !== 'bankSearch') {
                list.remove();
                list = null;
            }
        }
    })

    effectiveIssuerId = document.getElementById('loginWithBS:effectiveIssuerId')
    getBanks(true);
    getVoivodeships().then(r => {
        getBankList().then(r => {
            list = loadingContinuation(list, wrapper, getBanks);
        });
    });

    $.fn.resizeselect = function () {
        var arrowWidth = 20;
        return this.each(function () {

            $(this).change(function () {
                var $this = $(this);

                var text = $this.find("option:selected").text();

                var $test = $("<span>").html(text).css({
                    "font-size": $this.css("font-size"),
                    "visibility": "hidden"
                });

                $test.appendTo($this.parent());
                var width = $test.width()

                $test.remove();
                $this.width(width + arrowWidth);

            }).change();

        });
    };

    function initializeFooterTogglers() {
        $('footer .js-toggle-shortcuts').click(footerLinkToggle);
        $('footer .js-toggle-shortcuts').keypress(footerLinkToggle);
    }

    function footerLinkToggle(event) {
        var $element = $(event.currentTarget);
        var ariaExpanded = !$element.attr("aria-expanded")
        $element.attr("aria-expanded", ariaExpanded);
        $element.parent().toggleClass('expanded');
    }

    function resizeSelectWidth() {
        $("select").resizeselect();
    }

    function countInnerCardsInRow() {
        return $(".inner-profil-card").length;
    }

    function getWidthAccordingToScreenSize() {
        //only for '.profil-card-expandable' according to used .css classes
        var screenWidth = $(document).outerWidth()
        if (screenWidth < 640) {
            //in html 2 * '.small-6'
            return 100
        } else if (screenWidth >= 640 && screenWidth < 1024) {
            //in html 2 * '.medium-5'
            return 83.33333
        } else {
            //in html 2 * '.large-4'
            return 66.666667
        };
    }


    function setProfilCardExpandableWidth() {
        var percentWidth = getWidthAccordingToScreenSize()
        var numberOfCards = countInnerCardsInRow() > 4 ? 4 : countInnerCardsInRow(); /* max 4 cards per row */
        if (percentWidth >= 83) {
            if (numberOfCards <= 2 || percentWidth === 100) {
                $(".profil-card-expandable").outerWidth(percentWidth + '%')
            } else {
                $(".profil-card-expandable").outerWidth(percentWidth + 3 + '%')
            }
        } else {
            var width = percentWidth !== 100 ? percentWidth * numberOfCards * 0.25 /* max 4 cards per row */ : 100;
            if (numberOfCards <= 2 || width === 100) {
                $(".profil-card-expandable").outerWidth(width + '%')
            } else {
                $(".profil-card-expandable").outerWidth(width + 3 + '%')
            }
        }
    }

    function setInnerProfilCardSpace() {
        var cards = countInnerCardsInRow();
        //It should be max 4 cards in row
        return 100 / cards >= 25 ? 100 / cards + "%" : "25%"
    }


    function setStyles() {
        var screenWidth = $(document).outerWidth()
        if (screenWidth >= 760) {
            $('div.inner-profil-card').css({
                "margin": "10px 16px",
                "flex": "0 0 calc(" + setInnerProfilCardSpace() + " - 32px)"
            })
            $('div.profil-card-expandable').css({ "padding": "26px 16px" })
            $('#logoHolder').attr('class', 'logo-holder')
        } else if (screenWidth >= 640 && screenWidth < 760) {
            $('div.inner-profil-card').css({
                "margin": "10px 16px",
                "flex": "0 0 calc(50% - 32px)"
            })
            $('div.profil-card-expandable').css({ "padding": "26px 16px" })
            $('#logoHolder').attr('class', 'logo-holder-medium')
        } else {
            $('div.inner-profil-card').css({
                "margin": "10px 7px",
                "flex": "0 0 calc(50% - 14px)"
            })
            $('div.profil-card-expandable').css({ "padding": "20px 7px 30px 7px" })
            $('#logoHolder').attr('class', 'logo-holder-small')
        }
    }

    //Dodane dwie metody do zaciągania danych, śmiało można poprzez przekazanie parametrów zrobić jedną
    async function getVoivodeships() {
        const url = $("#voivodeshipListEndpointUrl").text();

        let responsePromise = await fetch(url);
        var voivodeships = await responsePromise.json();

        var selectVoivodeship = document.getElementById('voivodeship')
        var df = document.createDocumentFragment();

        var option = document.createElement('option');
        option.value =  'Wybierz';
        option.appendChild(document.createTextNode(dictionary[GlobalVariables.language]["chooseValue"]));
        df.appendChild(option);

        voivodeships.forEach((e) => {
            var option = document.createElement('option');
            option.value = e;
            option.appendChild(document.createTextNode(e));
            df.appendChild(option);
        })
        selectVoivodeship.appendChild(df);
    }

    function getBanks(init = false) {
        var selectBank = document.getElementById('bank');

        if (selectBank.childElementCount) {
            selectBank.querySelectorAll('*').forEach(n => n.remove());

            var df = document.createDocumentFragment();

            var option = document.createElement('option');
            option.appendChild(document.createTextNode(dictionary[GlobalVariables.language]["chooseValue"]));
            option.value =  'Wybierz';
            df.appendChild(option);

            if (!init) {
                var currentItem = document.getElementsByClassName("voivodeshipSelect")[0].getElementsByClassName("same-as-selected")[0];
                let selectedVoivodeshipValue = currentItem.innerText;
                fetchedBanks.forEach((e) => {
                    if (e.voivodeship.localeCompare(selectedVoivodeshipValue) == 0) {
                        var option = document.createElement('option');
                        option.appendChild(document.createTextNode(e.name));
                        option.value = e.issuer;
                        df.appendChild(option);
                    }
                })
            }
            selectBank.appendChild(df);

        } else {
            var df = document.createDocumentFragment();
            var option = document.createElement('option');
            option.value =  'Wybierz';
            option.appendChild(document.createTextNode(dictionary[GlobalVariables.language]["chooseValue"]));
            df.appendChild(option);
            selectBank.appendChild(df);
        }
    }

    async function getBankList() {
        const url = $("#cooperativeBanksListEndpointUrl").text();

        let responsePromise = await fetch(url);
        fetchedBanks = await responsePromise.json();
    }


    $(window).resize(function () {
        setProfilCardExpandableWidth();
        setStyles();
    })

    initializeFooterTogglers();
    resizeSelectWidth();

    //timeout for EDGE and IE
    setTimeout(setProfilCardExpandableWidth, 10);
    setTimeout(setStyles, 10);
});
