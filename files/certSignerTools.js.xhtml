var tokenId;
var keyId;
var certificate;
var certificateChain;
var encryptionAlgorithm;
var status;

var challengeId;
var pksignerVersion;
var pksignerUrl;
var dtUrl;
var digestAlgo;
var getToBeSignedEndpointSuffix;
var uploadPKSignatureEndpointSuffix;

function init() {
    $("#signerRun").hide();
    $("#signerNotRun").hide();
    $("#titleWarningMessage2").hide();
    $("#titleWarningMessage3").hide();

    /* PK Signer */
    pksignerVersion = $("#pkSignerVersion").text();
    pksignerUrl = $("#pkSignerUrl").text();
    dtUrl = $("#dtUrl").text();
    digestAlgo = $("#pkSignerDigestAlgo").text();
    getToBeSignedEndpointSuffix = $("#getToBeSignedEndpointSuffix").text();
    uploadPKSignatureEndpointSuffix = $("#uploadPKSignatureEndpointSuffix").text();

    var goodVersion = false;
    var goodPodpisGovVersion = false;

    $.get(pksignerUrl + "/rest/version", function (data) {

        var version = data.version;
        var minVersion = pksignerVersion;
        var minPodpisGovVersion = '1.5.1.1';

        var versionArray = version.split(".");
        var minVersionArray = minVersion.split(".");

        if (!version.startsWith("1.4")) { // version 1.4.x == PK Signer

            if(minPodpisGovVersion === version) {
                goodPodpisGovVersion = true;
            } else if (minPodpisGovVersion < version) {
                goodPodpisGovVersion = true;
            } else if (minPodpisGovVersion > version) {
                goodPodpisGovVersion = false;
            }

            if (goodPodpisGovVersion === false) {
                var isIE = /*@cc_on!@*/false || !!document.documentMode;
                var isEdge = !isIE && !!window.StyleMedia;

                if (isIE || isEdge) document.getElementById("loader_icon").src = "/pz/resources/images/loader_gov.gif";

                $("#signerRun").show();
                $("#signerNotRun").hide();
                $("#titleWarningMessage2").hide();
                $("#titleWarningMessage3").show();
            } else {
                $("#signerRun").show();
                $("#signerNotRun").hide();
                $("#titleWarningMessage2").show();
                $("#titleWarningMessage3").hide();
            }

        } else {
            goodVersion = true;
            for (i = 0; i < versionArray.length; i++) {
                if (parseInt(minVersionArray[i]) > parseInt(versionArray[i])) {
                    goodVersion = false;
                    break;
                } else if (parseInt(minVersionArray[i]) < parseInt(versionArray[i])) {
                    break;
                }
            }

            if (goodVersion == true) {
                var isIE = /*@cc_on!@*/false || !!document.documentMode;
                var isEdge = !isIE && !!window.StyleMedia;

                if (isIE || isEdge) document.getElementById("loader_icon").src = "/pz/resources/images/loader_gov.gif";

                $("#signerRun").show();
                $("#signerNotRun").hide();
                $("#titleWarningMessage3").hide();
                // tymczasowo wyłączone automatyczne wywoływanie pksignera podczas ładowania strony
                // if ($(".run-application").length) {
                //     signPksigner();
                // }
            } else {
                $("#signerRun").hide();
                $("#signerNotRun").show();
                $("#titleWarningMessage3").hide();
            }
        }

    });

    if (goodVersion == false) {
        $("#signerRun").hide();
        $("#signerNotRun").show();
        $("#titleWarningMessage3").hide();
    } else if (goodPodpisGovVersion == false) {
        $("#signerRun").hide();
        $("#signerNotRun").show();
        $("#titleWarningMessage3").hide();
    }


    /* PZ Signer */
    $("#processBegin").hide();
    $("#authCopyButton").show();

    $("#authCopyButton").click(function () {
        $("#processBegin").show();
        $("#authCopyButton").hide();
    });
}

function getPKSignerDownloadUrl() {
    if (navigator.appVersion.indexOf("Win") != -1) {
        if (navigator.userAgent.indexOf("WOW64") != -1 || navigator.userAgent.indexOf("Win64") != -1) {
            window.location.href = '/PodpisGOV/windows/x64/PodpisGOV.exe';
        } else {
            window.location.href = '/PodpisGOV/windows/x86/PodpisGOV.exe';
        }
    } else if (navigator.appVersion.indexOf("Mac") != -1) {
        window.location.href = '/PodpisGOV/macosx/PodpisGOV.dmg';
    } else if (navigator.appVersion.indexOf("Linux") != -1) {
        window.location.href = '/PodpisGOV/linux/PodpisGOV.tar.gz';
    } else {
        $("#pk_signer_not_run_form\\:logSystemDetectionErrorButton").click();
    }
}

function validateInputLogin() {
    if(document.getElementById("pk_signer_run_form:login").value.length === 0) {
        document.getElementById("noLoginMessage").style.display = "block";
    } else {
        document.getElementById("noLoginMessage").style.display = "none";
        signPksigner();
    }
}

function signPksigner() {
    document.getElementById("processing-modal-container").style.display = "block";

    challengeId = $("#challengeId").text();

    status = false;

    getCertificates();
    check = function () {
        if (status == "true" || status == true) {
            $("#pk_signer_run_form\\:submitPKSignerButton").click();
            return true;
        } else {
            setTimeout(check, 250);
        }
    }
    check();
};

function getCertificates() {
    pksigner_get_certificates(getDataToSign, error);
}

function getDataToSign(certificateData) {
    if (certificateData.response == null) {
        $("#PKSignerStatus").text("Błąd w komunikacji z PKSigner-em");
    } else {
        certificate = certificateData.response.certificate;
        certificateChain = certificateData.response.certificateChain;
        encryptionAlgorithm = certificateData.response.encryptionAlgorithm;

        tokenId = certificateData.response.tokenId;
        keyId = certificateData.response.keyId;

        var toSend = {
            challengeId: challengeId
        };
        callUrl(dtUrl + getToBeSignedEndpointSuffix, "POST", JSON.stringify(toSend), sign, error);

    }
}

function sign(dataToSignResponse) {
    if (dataToSignResponse == null) {
        $("#PKSignerStatus").text("Błąd w komunikacji z systemem DT");
    } else {
        pksigner_sign_with_token_infos(tokenId, keyId, dataToSignResponse.dataToSign, digestAlgo, signDocument, error);
    }
}

function signDocument(signatureData) {
    var signatureValue = signatureData.response.signatureValue;
    var signatureAlgorithm = signatureData.response.signatureAlgorithm;
    var certificate = signatureData.response.certificate;
    var certificateChain = signatureData.response.certificateChain;
    var toSend = {
        challengeId: challengeId,
        signatureValue: signatureValue,
        signatureAlgorithm: signatureAlgorithm,
        certificate: certificate,
        certificateChain: certificateChain
    };

    callUrl(dtUrl + uploadPKSignatureEndpointSuffix, "POST", JSON.stringify(toSend), finish, error);
}


function finish(signDocumentResponse) {
    status = true;
    return true;
}

function error(error) {
    if (error.status == 410) {
        //    anuluj
        $("#pk_signer_run_form_back\\:cancelButtonRun").click();
    } else if (error.status == 408) {
        //    timeout
        $("#pk_signer_run_form_back\\:cancelButtonRun").click();
    } else if (error.status == 500) {
        //    błąd wewnetrzny
        $("#pk_signer_run_form\\:logPKSignerConnectionErrorButton").click();
    } else {
        //    nieznany błąd
        $("#pk_signer_run_form\\:logPKSignerConnectionErrorButton").click();
    }
    return false;
}

// ======================== PKSigner =============================

function pksigner_get_certificates(success_callback, error_callback) {
    callUrl(pksignerUrl + "/rest/certificates", "GET", {}, success_callback, error_callback);
}

function pksigner_sign_with_token_infos(tokenId, keyId, dataToSign, digestAlgo, success_callback, error_callback) {
    var data = '{ "tokenId":"' + tokenId + '", "keyId":"' + keyId + '", "toBeSigned": "' + dataToSign + '", "digestAlgorithm":"' + digestAlgo + '"}';
    callUrl(pksignerUrl + "/rest/sign", "POST", data, success_callback, error_callback);

}

function callUrl(url, type, data, success_callback, error_callback) {
    $.ajax({
        type: type,
        url: url,
        data: data,
        crossDomain: true,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (result) {
            success_callback.call(this, result);
        }
    }).fail(function (error) {
        error_callback.call(this, error);
    });
}

function replaceContent() {
    $("#signerRun").hide();
    $("#titleWarningMessage3").hide();
    $("#signerNotRun").show();
    $("#titleWarningMessage2").show();
}